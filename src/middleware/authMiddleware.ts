import { Request, Response, NextFunction } from "express";
import fetch from "node-fetch";

// Extend Express Request type to include user property
declare global {
  namespace Express {
    interface Request {
      user?: any;
    }
  }
}

// Debug logging
const DEBUG = true;

/**
 * Middleware to verify Cloud Run access tokens
 * This validates tokens generated by the gcloud-authentication service
 */
export async function verifyCloudRunToken(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  try {
    if (DEBUG) console.log("[Auth Middleware] Validating Cloud Run token...");

    // Get token from Authorization header
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      if (DEBUG)
        console.log(
          "[Auth Middleware] Missing or invalid authorization header"
        );
      res.status(401).json({
        error: "Authentication required",
        message: "Missing or invalid authorization header",
      });
      return;
    }

    // Extract token
    const token = authHeader.substring(7);

    // Validate token with Google's tokeninfo endpoint
    if (DEBUG) console.log("[Auth Middleware] Validating token with Google...");
    const tokenInfo = await validateAccessToken(token);

    if (DEBUG) console.log("[Auth Middleware] Token validated successfully");

    // Add validated token information to request
    req.user = tokenInfo;
    next();
  } catch (error) {
    console.error("[Auth Middleware] Token validation error:", error);
    res.status(403).json({
      error: "Authentication failed",
      message: "Invalid or expired token",
    });
  }
}

/**
 * Validates a Google Cloud access token
 */
async function validateAccessToken(token: string): Promise<any> {
  try {
    // Do NOT use string template literals or concatenation to build the URL
    // This is what causes the path-to-regexp issue
    const baseUrl = "https://oauth2.googleapis.com/tokeninfo";
    const url = new URL(baseUrl);
    url.searchParams.append("access_token", token);
    
    const response = await fetch(url.toString());

    if (!response.ok) {
      const errorText = await response.text();
      console.error("[Auth Middleware] Token validation failed:", errorText);
      throw new Error(`Invalid token: ${errorText}`);
    }

    const tokenInfo = await response.json();

    if (DEBUG) {
      console.log("[Auth Middleware] Token info:", {
        email: tokenInfo.email,
        scope: tokenInfo.scope,
        expires_in: tokenInfo.expires_in,
      });
    }

    // Basic validation
    if (!tokenInfo.expires_in || tokenInfo.expires_in <= 0) {
      throw new Error("Token is expired");
    }

    return tokenInfo;
  } catch (error) {
    console.error("[Auth Middleware] Error validating token:", error);
    throw error;
  }
}

/**
 * Optional middleware for endpoints that don't require authentication
 * But can still use authentication if provided
 */
export async function optionalAuth(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    // No token provided - continue without auth
    if (DEBUG)
      console.log("[Auth Middleware] No auth token provided (optional)");
    next();
    return;
  }

  // Try to validate the token
  try {
    const token = authHeader.substring(7);
    const tokenInfo = await validateAccessToken(token);
    req.user = tokenInfo;
    if (DEBUG) console.log("[Auth Middleware] Optional auth validated");
  } catch (error) {
    // Token validation failed - continue without auth
    if (DEBUG)
      console.log("[Auth Middleware] Optional auth failed, continuing without");
  }

  next();
}