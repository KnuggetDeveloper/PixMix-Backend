import { Request, Response, NextFunction } from "express";
import fetch from "node-fetch";

// Extend Express Request type
declare global {
  namespace Express {
    interface Request {
      tokenInfo?: any; // Google token info
    }
  }
}

/**
 * Middleware to verify Cloud Run tokens
 * 
 * This middleware validates tokens that are generated by the gcloud-authentication service
 * and ensures they are valid Google Cloud Platform OAuth2 tokens.
 */
export async function verifyCloudRunToken(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  try {
    // Get token from Authorization header
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      res.status(401).json({
        error: "Authentication required",
        message: "Missing or invalid authorization header",
      });
      return;
    }

    // Extract token
    const token = authHeader.substring(7);

    // Validate token with Google's tokeninfo endpoint
    try {
      const tokenInfo = await validateAccessToken(token);
      
      // Verify the token has the right scopes for Cloud Run
      if (!tokenInfo.scope || !tokenInfo.scope.includes("https://www.googleapis.com/auth/cloud-platform")) {
        throw new Error("Token does not have the required scopes");
      }
      
      // Add validated token information to request
      req.tokenInfo = tokenInfo;
      next();
    } catch (error) {
      console.error("Token validation error:", error);
      res.status(403).json({
        error: "Authentication failed",
        message: "Invalid or expired token",
      });
    }
  } catch (error) {
    console.error("Error in auth middleware:", error);
    res.status(500).json({ error: "Internal server error" });
  }
}

/**
 * Validates a Google Cloud access token
 * 
 * @param token Google Cloud OAuth2 token
 * @returns Token info from Google's tokeninfo endpoint
 */
async function validateAccessToken(token: string): Promise<any> {
  try {
    // Construct URL safely without string concatenation
    const url = new URL("https://oauth2.googleapis.com/tokeninfo");
    url.searchParams.append("access_token", token);
    
    const response = await fetch(url.toString());

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Invalid token: ${errorText}`);
    }

    const tokenInfo = await response.json();

    // Basic validation
    if (!tokenInfo.expires_in || tokenInfo.expires_in <= 0) {
      throw new Error("Token is expired");
    }

    return tokenInfo;
  } catch (error) {
    console.error("Error validating token:", error);
    throw error;
  }
}

/**
 * Optional middleware for endpoints that don't require authentication
 * but can still use authentication if provided
 */
export async function optionalAuth(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    // No token provided - continue without auth
    next();
    return;
  }

  // Try to validate the token
  try {
    const token = authHeader.substring(7);
    const tokenInfo = await validateAccessToken(token);
    req.tokenInfo = tokenInfo;
  } catch (error) {
    // Token validation failed - continue without auth
    console.log("Optional auth failed, continuing without authentication");
  }

  next();
}